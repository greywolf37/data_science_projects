View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number())
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(text))
View(tidy)
?cumsum
cumsum(1:10)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter", ignore_case = True))))
?regex
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter", ignore_case = TRUE))))
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter", ignore_case = TRUE)))) %>%
ungroup()
View(tidy)
?unnest_tokens
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter []", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_token(word, text)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_token(word, text)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text, token = "sentences")
View(tidy)
View(tidy)
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text, token = "regex", pattern = "Chapter [\\\\d]")
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text, token = "character_shingles", n = 4)
View(tidy)
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text, token = stringr::str_split, pattern = " ")
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text, token = stringr::str_split, pattern = " ")
View(tidy)
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
View(tidy)
positive_senti <- get_sentiments() %>%
filter(sentiment == "positive")
View(positive_senti)
summary(tidy)
?semi_join
get_sentiments()
# Get just positive sentiment words
tidy %>%
filter(book == 'Emma')
# Get just positive sentiment words
tidy %>%
filter(book == 'Emma') %>%
semi_join(positive_senti)
# Get just positive sentiment words
tidy %>%
filter(book == 'Emma') %>%
semi_join(positive_senti) %>%
count(word, sort = TRUE)
?count
library(tidyr)
install.packages("tidyr")
library(tidyr)
# Get just positive sentiment words
Emma_positive <- tidy %>%
filter(book == 'Emma') %>%
semi_join(positive_senti) %>%
count(word, sort = TRUE)
View(Emma_positive)
bing <- get_sentiments("bing")
View(bing)
tidy %>%
inner_join(bing)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma")
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book == "Emma")
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma")
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiments)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80)
, sentiment
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(sentiment)
book = "Emma", index = linenumber %/% 80,
book = "Emma", index = linenumber %/% 80,
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment)
?spread
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0)
tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
library(ggplot)
install.packages("ggplot")
Emma_sentiment <- tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
View(Emma_sentiment)
library(ggplot)
library(ggplot)
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot2)
?aes
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment))
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma')
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma') +
geom_bar(stat = "identity", show.legend = TRUE)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma') +
geom_bar(show.legend = TRUE)
stat = "identity",
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma') +
geom_bar(stat = "identity", show.legend = TRUE)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma') +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma') +
geom_bar(stat = "identity", show.legend = TRUE)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill='Emma') +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, )
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, )
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 2)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 10)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 10000)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 2)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 2, scales = 'xfree')
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 2, scales = 'free')
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 2, scales = 'free_y')
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~book, ncol = 2, scales = 'free_x')
?GeomBar
?facet_wrap
?~
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~sentiment, ncol = 2, scales = 'free_x')
#
tidy %>%
inner_join(bing)
#
tidy %>%
inner_join(bing) %>%
count(word)
#
tidy %>%
inner_join(bing) %>%
count(word, sentiment)
#
tidy %>%
inner_join(bing) %>%
count(word)
, sentiment
#
tidy %>%
inner_join(bing) %>%
count(word, sentiment)
#
counting_words <- tidy %>%
inner_join(bing) %>%
count(word, sentiment)
View(counting_words)
# Finding most sentimental words
counting_words <- tidy %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE)
# Finding most sentimental words
counting_words <- tidy %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE)
View(counting_words)
counting_words %>%
filter(n > 150)
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(n = reorder(n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(n = reorder(word, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n))
?reorder
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n))
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill= sentiment)) +
geom_col() +
coord_flip() +
labs(y = 'Sentiment Score')
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
ggplot(aes(word, n, fill= sentiment)) +
geom_col() +
coord_flip() +
labs(y = 'Sentiment Score')
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill= sentiment)) +
geom_col() +
coord_flip() +
labs(y = 'Sentiment Score')
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(sentiment = reorder(sentiment, n)) %>%
ggplot(aes(word, n, fill= sentiment)) +
geom_col() +
coord_flip() +
labs(y = 'Sentiment Score')
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill= sentiment)) +
geom_col() +
coord_flip() +
labs(y = 'Sentiment Score')
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~sentiment, ncol = 2, scales = 'free_x')
# Sentiments in book  Emma
bing <- get_sentiments("bing")
Emma_sentiment <- tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~sentiment, ncol = 2, scales = 'free_x')
# Load packages
library(dplyr)
# Load packages
library(dplyr)
source('C:/Users/Rubin Thomas/Desktop/DS_projects/sentiment_analysis/senti.R')
library(tidytext)
library(tidyr)
library(stringr)
library(janeaustenr)
library(ggplot2)
setwd("C:/Users/Rubin Thomas/Desktop/DS_projects/sentiment_analysis")
# "afinn" for values from -5 to 5
get_sentiments("bing")
# loading janes book
tidy <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
# Positive sentiments
positive_senti <- get_sentiments() %>%
filter(sentiment == "positive")
# Get just positive sentiment words
Emma_positive <- tidy %>%
filter(book == 'Emma') %>%
semi_join(positive_senti) %>%
count(word, sort = TRUE)
# Sentiments in book  Emma
bing <- get_sentiments("bing")
Emma_sentiment <- tidy %>%
inner_join(bing) %>%
filter(book == "Emma") %>%
count(book = "Emma", index = linenumber %/% 80, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
# Plotting sentiment over the book
ggplot(Emma_sentiment, aes(index, sentiment), fill=book) +
geom_bar(stat = "identity", show.legend = TRUE) +
facet_wrap(~sentiment, ncol = 2, scales = 'free_x')
# Finding most sentimental words
counting_words <- tidy %>%
inner_join(bing) %>%
count(word, sentiment, sort = TRUE)
counting_words %>%
filter(n > 150) %>%
mutate(n = ifelse(sentiment == 'negative', -n, n)) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n, fill= sentiment)) +
geom_col() +
coord_flip() +
labs(y = 'Sentiment Score')
library(reshape2)
install.packages("reshape2")
install.packages("wordcloud")
library(reshape2)
library(wordcloud)
# Crating a word cloud
tidy %>%
semi_join(bing)
# Crating a word cloud
tidy %>%
semi_join(bing) %>%
count(word, sentiment)
# Crating a word cloud
tidy %>%
semi_join(bing) %>%
count(word, sentiment)
View(bing)
View(bing)
# Crating a word cloud
tidy %>%
semi_join(bing)
# Crating a word cloud
tidy %>%
inner_join(bing)
# Crating a word cloud
tidy %>%
inner_join(bing) %>%
count(word, sentiment)
# Crating a word cloud
tidy %>%
inner_join(bing) %>%
count(word, sentiment) %>%
acast(word ~ sentiment, value.var = 'n', fill = 0)
# Crating a word cloud
tidy %>%
inner_join(bing) %>%
count(word, sentiment) %>%
acast(word ~ sentiment, value.var = 'n', fill = 34)
# Crating a word cloud
tidy %>%
inner_join(bing) %>%
count(word, sentiment) %>%
acast(word ~ sentiment, value.var = 'n', fill = 0)
# Crating a word cloud
tidy %>%
inner_join(bing) %>%
count(word, sentiment) %>%
acast(word ~ sentiment, value.var = 'n', fill = 0)
?acast
# Crating a word cloud
tidy %>%
inner_join(bing) %>%
count(word, sentiment) %>%
acast(word ~ sentiment, value.var = 'n', fill = 0) %>%
comparison.cloud(color = c("red", "dark green"), max.words = 100)
