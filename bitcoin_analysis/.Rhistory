print('hello")
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
q()
2+2
2+2
print('hello')
print('hello')
print('hello')
plot(cars)
setwd(C:\Users\Rubin Thomas\Desktop\DS_projects\bitcoin_analysis)
setwd('C:\Users\Rubin Thomas\Desktop\DS_projects\bitcoin_analysis')
setwd('C:/Users/Rubin Thomas/Desktop/DS_projects/bitcoin_analysis')
file.path('~', 'data', 'bitcoin_dataset.csv')
file_path = file.path('~', 'data', 'bitcoin_dataset.csv')
read.csv(file_path)
?read.csv
read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
file_path = file.path('~', 'data', 'bitcoin_dataset.csv')
read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
file_path = file.path('~', 'data', 'bitcoin_dataset.csv')
file_path = file.path('~', 'data', 'bitcoin_dataset.csv')
file_path = file.path('~', 'data', 'bitcoin_dataset.csv')
read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
file_path = file.path('.', 'data', 'bitcoin_dataset.csv')
read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
list.files(path = './data')
file_path = file.path('.', 'data', 'bitcoin_dataset.csv')
bit_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
bit_data
factor(bit_data)
class(bit_data)
labels(bit_data)
names(bit_data)
install.packages('lubridate')
library(lubridate)
library(lubridate)
# Converting to data time
bit_data$Date
# Converting to data time
bit_data$Date
# Converting to data time
bit_data$Date[0]
# Converting to data time
bit_data$Date[0]
# Converting to data time
bit_data$Date[1]
# Converting to data time
bit_data$Date[1 : 10]
# Converting to data time
mdy(bit_data$Date)[1 : 10]
# Converting to data time
mdy_hms(bit_data$Date)[1 : 10]
# Converting to data time
ymd_hms(bit_data$Date)[1 : 10]
# Converting to data time
ymd(bit_data$Date)[1 : 10]
# Converting to data time
ymd_hms(bit_data$Date)[1 : 10]
# Converting to data time
bit_data <- ymd_hms(bit_data$Date)
head(bit_data$bit_data)
bit_data$bit_data.head
bit_data$bit_data.head()
head(bit_data$Date)
head(bit_data)
file_path = file.path('.', 'data', 'bitcoin_dataset.csv')
bit_data <- read.csv(file_path, header = TRUE, stringsAsFactors = FALSE)
bit_data
# Converting to data time
bit_data$Date <- ymd_hms(bit_data$Date)
head(bit_data)
summary(bit_data)
install.packages('dygraphs')
library(lubridate)
library(dygraphs)
# Plot along time
plot_data <-
bit_data[['Date']]
bit_data[['Date']]
bit_data[['Date', 'Date']]
bit_data[['Date', 'btc_output_volume']]
bit_data['Date', 'btc_output_volume']
bit_data[:, ['Date', 'btc_output_volume']]
bit_data[:,'Date']
dyplot(bit_data) %>%
dySeries('btc_market_price', label = 'Price') %>%
dySeries('btc_total_bitcoins', label = 'Number of coins') %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector()
dygraph(bit_data) %>%
dySeries('btc_market_price', label = 'Price') %>%
dySeries('btc_total_bitcoins', label = 'Number of coins') %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector()
library(xts)
library(lubridate)
library(dygraphs)
library(xts)
# Plot along time
price <- bit_data$btc_market_price
number_total <- bit_data$btc_total_bitcoins
combined <- cbind(price, number_total)
combined
combined[1:10]
head(combined)
# Plot along time
price <- bit_data$btc_market_price
number_total <- bit_data$btc_total_bitcoins
combined <- cbind(price, number_total)
plot_data <- xts(combined, bit_data$Date)
dygraph(plot_data) %>%
dySeries('price', label = 'Price') %>%
dySeries('number_total', label = 'Number of coins') %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector()
# Plot along time
price <- bit_data$btc_trade_volume
number_total <- bit_data$btc_total_bitcoins
combined <- cbind(price, number_total)
plot_data <- xts(combined, bit_data$Date)
dygraph(plot_data) %>%
dySeries('price', label = 'Price') %>%
dySeries('number_total', label = 'Number of coins') %>%
dyOptions(stackedGraph = TRUE) %>%
dyRangeSelector()
library(dplyr)
library(lubridate)
library(dygraphs)
library(xts)
bit_data %>% select('Date')
dygraph(time_series_data) %>%
dySeries('feature_vector', label = feature_vector) %>%
dyRangeSelector()
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data %>% select('Date')
time_series_data <- xts(feature_vector, data)
dygraph(time_series_data) %>%
dySeries('feature_vector', label = feature_vector) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data %>% select('Date')
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data) %>%
dySeries('feature_vector', label = feature_vector) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
str(bit_data %>% select('Date'))
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data %>% select('Date')
pritn(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data) %>%
dySeries('feature_vector', label = feature_vector) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data %>% select('Date')
print(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data) %>%
dySeries('feature_vector', label = feature_vector) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data$Date
print(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data) %>%
dySeries('feature_vector', label = feature_vector) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data$Date
print(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data) %>%
dySeries(feature_vector, label = feature_vector) %>%
dyRangeSelector()
}
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data$Date
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data) %>%
dySeries(feature_vector, label = feature_vector) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
help("dygraph")
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data$Date
print(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data, main = 'Plot feature') %>%
dySeries(feature, label = feature) %>%
dyRangeSelector()
}
plot_feature('btc_trade_volume', bit_data)
View(plot_feature)
plot_feature('btcmarketprice', bit_data)
features = names(bit_data)
features[1]
features[2]
features[3]
plot_feature(features[2], bit_data)
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data$Date
print(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data, main = paste('Plot of ', feature)) %>%
dySeries(feature, label = feature) %>%
dyRangeSelector()
}
plot_feature(features[2], bit_data)
plot_feature(features[3], bit_data)
plot_feature(features[4], bit_data)
plot_feature(features[5], bit_data)
plot_feature(features[6], bit_data)
plot_feature(features[7], bit_data)
plot_feature(features[8], bit_data)
plot_feature(features[9], bit_data)
plot_feature(features[10], bit_data)
plot_feature(features[11], bit_data)
plot_feature(features[12], bit_data)
plot_feature(features[13], bit_data)
plot_feature(features[14], bit_data)
plot_feature(features[2], bit_data)
plot_feature(features[15], bit_data)
plot_feature(features[16], bit_data)
plot_feature(features[17], bit_data)
plot_feature(features[18], bit_data)
plot_feature(features[19], bit_data)
plot_feature(features[20], bit_data)
plot_feature(features[21], bit_data)
# function to plot a graph of a single attribute with time
plot_feature <- function(feature, data) {
feature_vector <- data %>% select(feature)
date <- data$Date
print(str(date))
time_series_data <- xts(feature_vector, date)
dygraph(time_series_data, main = paste('Plot of ', feature)) %>%
dySeries(feature, label = feature) %>%
dyRangeSelector()
}
plot_feature(features[22], bit_data)
plot_feature(features[23], bit_data)
plot_feature(features[24], bit_data)
